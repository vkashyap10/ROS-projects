#!/usr/bin/env python

# This node listens to the topic "random_points" for contraints on trajectory, calls the compute_cubic_traj_1 service to get coefficients for cubic trajectory and publishes these coefficients on another topic called cubic_coeffs

import rospy
# import messages to be used
from ar_week5_test.msg import cubic_traj_params, cubic_traj_coeffs
# import servicee to be used
from ar_week5_test.srv import compute_cubic_traj

# callback() will call compute_cubic_traj srv to get coefficients and then publish to a ROS topic
def callback(data):
    print("running callback after receiving random points")
    # call service compute_cubic_traj to get coefficients
    print("waiting for service")
    # wait for the service node if it has not been initialised yet
    rospy.wait_for_service('compute_cubic_traj_1')
    print("service initialised")
    try:
        compute_cubic_traj_1 = rospy.ServiceProxy('compute_cubic_traj_1', compute_cubic_traj)
        resp1 = compute_cubic_traj_1(data.p0,data.pf,data.v0, data.vf, data.t0, data.tf)
    except rospy.ServiceException as e:
        print("Service call failed: %s"%e)

    # publish coefficients and time parameters to ROS topic
    print("publishing to cubic_coeffs topic")
    
    # wait till the plotting node has subscirbed to the topic
    while pub.get_num_connections() < 1:
        print("waiting for connection to cubic coeffs")
    # initialise cubic_traj_coeffs  message object
    cubic_coeffs_var = cubic_traj_coeffs()

    # initialise cubic_traj coeffs msg
    cubic_coeffs_var.a0 = resp1.a0
    cubic_coeffs_var.a1 = resp1.a1
    cubic_coeffs_var.a2 = resp1.a2
    cubic_coeffs_var.a3 = resp1.a3
    cubic_coeffs_var.t0 = data.t0
    cubic_coeffs_var.tf = data.tf
    
    # publish to topic
    rospy.loginfo(cubic_coeffs_var)
    pub.publish(cubic_coeffs_var)

    print("published data")

    return

if __name__ == '__main__':

    # initialise node
    rospy.init_node('cubic_traj_planner', anonymous=True)

    # subscribe to get random points
    rospy.Subscriber('random_points', cubic_traj_params, callback)

    pub = rospy.Publisher('cubic_coeffs', cubic_traj_coeffs, queue_size=10)

    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()

