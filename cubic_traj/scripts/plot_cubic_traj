#!/usr/bin/env python

import rospy
# import messages to be used
from ar_week5_test.msg import cubic_traj_coeffs
# import std msgs
from std_msgs.msg import Float64

# callback() will publish to position, velocity and acceleration to 3 topics as functions of time
def callback(data):

    print("running callback after receiving coefficients")
 
    rate = rospy.Rate(10) # 10hz
    
    # init_time is the time at which trajectory got started
    init_time = rospy.get_time()
    # curr_time is the time since trajectory got started
    curr_time = rospy.get_time()

    while init_time + data.tf > rospy.get_time():
        
        # sim_time is the time since trajectory was started. It will go from 0 to tf
        sim_time = curr_time - init_time

        # calculate position, velocity and acceleration
        # equation for position: a0 + a1*t + a2*t**2 + a4*t**3
        pos = data.a0 + (data.a1)*sim_time + (data.a2)*(sim_time**2) + (data.a3)*(sim_time**3)

        # equation for velocity: a1 + 2*a2*t + 3*a3*t**2
        vel = (data.a1) + 2*data.a2*sim_time + 3*data.a3*(sim_time**2)

        # equation for acceleration: 2*a2 + 6*a3*t
        acc = 2*data.a2 + 6*data.a3*sim_time
        
        # publish to ros topics
        rospy.loginfo(pos)
        pub1.publish(pos)

        rospy.loginfo(vel)
        pub2.publish(vel)

        rospy.loginfo(acc)
        pub3.publish(acc)

        rate.sleep()
        curr_time = rospy.get_time()

    return
    

if __name__ == '__main__':
    # initialise node
    rospy.init_node('plot_cubic_traj', anonymous=True)

    # subscribe to get cubic polynomial coefficients
    rospy.Subscriber('cubic_coeffs', cubic_traj_coeffs, callback)
    
    # initialise publisher nodes to publish position, velocity and acceleration as a function of time
    pub1 = rospy.Publisher('position_trajectory', Float64, queue_size=10)
    pub2 = rospy.Publisher('velocity_trajectory', Float64, queue_size=10)
    pub3 = rospy.Publisher('acceleration_trajectory', Float64, queue_size=10)

    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()

